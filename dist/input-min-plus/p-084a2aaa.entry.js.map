{"version":3,"names":["inputMinusPlusCss","InputMinusPlus","watchPropHandler","newValue","oldValue","this","value","number","watchStateHandler","handleClick","console","info","componentWillLoad","el","attributes","length","i","att","hasOwnProperty","nodeName","_input","nodeValue","sum","inpluschange","emit","less","onInputChange","ev","target","render","h","Host","onClick","onChange"],"sources":["./src/components/input-min-plus/input-minus-plus.css?tag=input-minus-plus&encapsulation=shadow","./src/components/input-min-plus/input-minus-plus.tsx"],"sourcesContent":[":host {\n  display: inline-flex;\n  flex-wrap: nowrap;\n\n  height: 100%;\n  border: 1px solid silver;\n  border-radius: 1em;\n  overflow: hidden;\n}\n\n\ninput, button{\n  height: 100%;\n  margin: 0;\n  border: none;\n  text-align: center;\n}\n\nbutton{\n  min-width: 1.5em;\n}\n\ninput{\n  width: 3em;\n}\n","import { Component,Element, Host, h,  State, Prop,Event, EventEmitter, Watch, Listen } from '@stencil/core';\n\n@Component({\n  tag: 'input-minus-plus',\n  styleUrl: 'input-minus-plus.css',\n  shadow: true\n})\nexport class InputMinusPlus {\n\n  @Event() inpluschange:  EventEmitter<HTMLInputElement>\n\n\n  @Watch('number')\n  watchPropHandler(newValue: boolean, oldValue: boolean) {\n    if ( newValue != oldValue) {\n      this.value = this.number;\n    }\n  }\n\n  @Watch('value')\n  watchStateHandler(newValue: boolean, oldValue: boolean) {\n    if ( newValue != oldValue) {\n      this.number = this.value;\n    }\n  }\n\n  @Prop({mutable:true, reflect: true}) value = null; \n  @State() number: number = 0;\n\n  @Element() el: HTMLElement;\n  _input: HTMLInputElement;\n\n\n  @Listen('change', { capture: true })\n  handleClick() {\n      // whenever a click event occurs on\n      // the component, update `isOpen`,\n      // triggering the rerender\n      console.info(\"aca esta la garompa esta caputrada\")\n  }\n\n\n  componentWillLoad(){\n\n    this.number = this.value * 1\n\n    if (  this.el.attributes.length ) {\n\n      for (var i = 0; i < this.el.attributes.length; i++){\n        let att = this.el.attributes[i];\n        if( !att.hasOwnProperty(\"nodeName\" ) ) continue;\n        if( att.nodeName == 'id' ) continue;\n\n        this._input[att.nodeName] = att.nodeValue;\n      }\n    }\n\n   // this.marceChange.call()\n  }\n\n  sum(){\n    this.number = this.number + 1;\n    this.inpluschange.emit(this._input)\n  }\n\n  less(){\n    this.number = this.number - 1;\n    this.inpluschange.emit(this._input)\n  }\n\n\n  onInputChange(ev){\n    this.number = ev.target.value *1;\n  } \n\n\n\n  render() {\n    return (\n      <Host>\n        <button onClick={()=>this.less()}>-</button>\n        <input value={this.number} onChange={(ev) => this.onInputChange(ev)}/>\n        <button onClick={()=>this.sum()}>+</button>\n      </Host>\n    );\n  }\n\n}\n"],"mappings":"gEAAA,MAAMA,EAAoB,2N,MCObC,EAAc,M,+EAmBoB,K,YACnB,C,CAd1BC,iBAAiBC,EAAmBC,GAClC,GAAKD,GAAYC,EAAU,CACzBC,KAAKC,MAAQD,KAAKE,M,EAKtBC,kBAAkBL,EAAmBC,GACnC,GAAKD,GAAYC,EAAU,CACzBC,KAAKE,OAASF,KAAKC,K,EAYvBG,cAIIC,QAAQC,KAAK,qC,CAIjBC,oBAEEP,KAAKE,OAASF,KAAKC,MAAQ,EAE3B,GAAMD,KAAKQ,GAAGC,WAAWC,OAAS,CAEhC,IAAK,IAAIC,EAAI,EAAGA,EAAIX,KAAKQ,GAAGC,WAAWC,OAAQC,IAAI,CACjD,IAAIC,EAAMZ,KAAKQ,GAAGC,WAAWE,GAC7B,IAAKC,EAAIC,eAAe,YAAe,SACvC,GAAID,EAAIE,UAAY,KAAO,SAE3Bd,KAAKe,OAAOH,EAAIE,UAAYF,EAAII,S,GAOtCC,MACEjB,KAAKE,OAASF,KAAKE,OAAS,EAC5BF,KAAKkB,aAAaC,KAAKnB,KAAKe,O,CAG9BK,OACEpB,KAAKE,OAASF,KAAKE,OAAS,EAC5BF,KAAKkB,aAAaC,KAAKnB,KAAKe,O,CAI9BM,cAAcC,GACZtB,KAAKE,OAASoB,EAAGC,OAAOtB,MAAO,C,CAKjCuB,SACE,OACEC,EAACC,EAAI,KACHD,EAAA,UAAQE,QAAS,IAAI3B,KAAKoB,QAAM,KAChCK,EAAA,SAAOxB,MAAOD,KAAKE,OAAQ0B,SAAWN,GAAOtB,KAAKqB,cAAcC,KAChEG,EAAA,UAAQE,QAAS,IAAI3B,KAAKiB,OAAK,K"}